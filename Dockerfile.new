# 🏰 Oak Dragon Covenant - Optimized Production Dockerfile
# Multi-stage build for better security and smaller image size

# Build stage
FROM node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git

WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci && npm cache clean --force

# Copy source code
COPY . .

# Run any build steps if needed
RUN npm run build 2>/dev/null || echo "No build script found, continuing..."

# Production stage
FROM node:18-alpine AS production

# Install system dependencies and security updates
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    tzdata && \
    rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S oakdragon && \
    adduser -S oakdragon -u 1001 -G oakdragon

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && \
    npm cache clean --force && \
    rm -rf /tmp/*

# Copy application code from builder stage
COPY --from=builder --chown=oakdragon:oakdragon /app .

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/data /app/tmp && \
    chown -R oakdragon:oakdragon /app

# Remove unnecessary files to reduce image size
RUN rm -rf \
    /app/.git* \
    /app/*.md \
    /app/tests \
    /app/coverage \
    /app/Dockerfile* \
    /app/docker-compose* \
    /app/.env.example

# Set environment variables
ENV NODE_ENV=production \
    PORT=3000 \
    LOG_LEVEL=info

# Set user to non-root for security
USER oakdragon

# Expose port
EXPOSE 3000

# Add labels for metadata
LABEL maintainer="Oak Dragon Covenant Team" \
      version="2.0.0" \
      description="Advanced AI Agent Ecosystem for Real Estate & Trading" \
      org.opencontainers.image.source="https://github.com/OakDragonCovenant/Oak-Dragon-Covenant"

# Health check with improved reliability
HEALTHCHECK --interval=30s \
            --timeout=10s \
            --start-period=60s \
            --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application with proper signal handling
CMD ["node", "server.js"]